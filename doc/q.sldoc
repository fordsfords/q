<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
  <head>
    <meta http-equiv="content-type" content="text/html;
      charset=windows-1252">
    <title>q Module Internals</title>
  </head>
  <body>
    <h1><a class="mozTocH1" name="mozTocId336658"></a>q Module Internals<br>
    </h1>
    <p>This is a <a href="http://geeky-boy.com/semlit/">semi-literate
        document</a> for the module <tt>q.c</tt> and it's associated
      files.&nbsp; This module implements a fast, lock-free,
      non-blocking queue.<br>
    </p>
    =semlit,include, copyright.sldoc=<br>
    <ol class="readonly" id="mozToc">
      <!--mozToc h1 1 h2 2 h3 3 h4 4 h5 5 h6 6-->
      <li><a href="#mozTocId336658">q Module Internals </a>
        <ol>
          <li><a href="#mozTocId638880">Introduction</a></li>
          <li><a href="#mozTocId641188">Q API</a></li>
          <li><a href="#mozTocId748906">Queue Algorithm</a>
            <ol>
              <li><a href="#mozTocId391823">Threading Considerations</a></li>
              <li><a href="#mozTocId63975">Alternate Algorithms</a></li>
            </ol>
          </li>
          <li><a href="#mozTocId41959">Module explanation: q.c </a>
            <ol>
              <li><a href="#mozTocId56359">Function q_enq</a></li>
              <li><a href="#mozTocId423705">Function: q_deq </a></li>
              <li><a href="#mozTocId415348">Structure: q_s</a></li>
              <li><a href="#mozTocId219381">Function: q_create</a></li>
            </ol>
          </li>
          <li><a href="#mozTocId97353">Module explanation: q_selftest.c,
              q_selftest.h </a></li>
          <li><a href="#mozTocId449019">Module explanation: q_perf.c</a></li>
          <li><a href="#mozTocId801555">Developers</a></li>
        </ol>
      </li>
    </ol>
    <h2><a class="mozTocH2" name="mozTocId638880"></a>Introduction</h2>
    <p>This document describes the internals of the <tt>q.c</tt>
      module, and is intended to be read by a programmer who wants to
      understand, maintain or reuse the code.&nbsp; Before reading this
      documentation, you are expected to have a good user-level
      understanding of C and queuing in general.<br>
    </p>
    <p><b>Characteristics</b> of the queue implemented by <tt>q.c</tt>:<br>
    </p>
    <ul>
      <li>Fixed size (size specified at queue creation time).</li>
      <li>Non-blocking (enqueuing to a full queue returns immediately
        with status; dequeuing from an empty queue returns immediately
        with status).</li>
      <li> Single Producer, Single Consumer (SPSC).<br>
      </li>
      <li>No dynamic memory allocates or frees during enqueue and
        dequeue operations.&nbsp; Messages are void pointers (null
        pointers are allowed).<br>
      </li>
      <li>High performance.&nbsp; On my Macbook Air, streaming data
        through a queue averages 11 ns per message (queue size=32),
        while ping-pong latency is 69 ns (one-way).</li>
      <li>Tested on Mac OSX 10.9 (Mavericks) and Linux 2.6 and 3.5
        kernels.&nbsp; At present, I only recommend the 64-bit x86
        processor family, due to the fact that I take advantage of its
        programmer-friendly memory model.&nbsp; In the future I hope to
        generalize it to be efficient on other processor types.<br>
      </li>
    </ul>
    <p></p>
    <p>The module is written in standard C, and is therefore usable by
      both C and C++ programs.<br>
    </p>
    <p>There are several source files:<br>
    </p>
    <ul>
      <li><b><span style="font-family: monospace;">=semlit,srcfile,q_c.slsrc,q_c.txt=</span></b>
        - (right-click and save as "<tt>q.c</tt>") code for the q
        module.</li>
      <li><b><span style="font-family: monospace;">=semlit,srcfile,q_h.slsrc,q_h.txt=</span></b>
        - (right-click and save as "<tt>q.h</tt>") header file for q
        module.</li>
      <li><b><span style="font-family: monospace;">=semlit,srcfile,q_selftest_c.slsrc,q_selftest_c.txt=</span></b>
        - (right-click and save as "<tt>q_selftest.c</tt>") unit test
        code.</li>
      <li><b><span style="font-family: monospace;">=semlit,srcfile,q_selftest_h.slsrc,q_selftest_h.txt=</span></b>
        - (right-click and save as "<tt>q_selftest.h</tt>") header for
        unit test.</li>
      <li><b><span style="font-family: monospace;">=semlit,srcfile,q_perf_c.slsrc,q_perf_c.txt=</span></b>
        - (right-click and save as "<tt>q_perf.c</tt>") performance
        measurement tool.</li>
    </ul>
    So, what are the "<tt>.sldoc</tt>" and "<tt>.slsrc</tt>" files in
    the doc directory?&nbsp; Short answer: you can ignore them <i>if
      you are a user</i> of the q module.&nbsp; Longer answer for <i>maintainers</i>
    of q: see section <a href="#mozTocId801555">Developers</a>.<br>
    <br>
    <h2><a class="mozTocH2" name="mozTocId641188"></a>Q API</h2>
    The API is documented in <tt>q.h</tt>: =semlit,insert,apis=
    <h2><a class="mozTocH2" name="mozTocId748906"></a>Queue Algorithm</h2>
    Although the code contained herein was written from scratch by Steve
    Ford in 2014, the algorithm was influenced by John D. Valois' 1994
    paper, "<a
href="http://people.cs.pitt.edu/%7Ejacklange/teaching/cs2510-f12/papers/implementing_lock_free.pdf"><i>Implementing





        Lock-Free Queues</i></a>"&nbsp; (Valois, J.: Implementing
    lock-free queues. In: Proceedings of the Seventh<br>
    International Conference on Parallel and Distributed Computing
    Systems. (1994) 64–69)<br>
    <br>
    This queue implementation is based on an array of N elements (where
    N must be a power of 2).&nbsp; There is a queue head that points to
    the oldest message (which will be dequeued next), and a queue tail,
    which points to an empty element where the next enqueue will go.<br>
    <br>
    At initialization, the queue looks like this:<br>
    <br>
    <img alt="empty queue with head and tail pointing to msgs[0]"
      src="q_pics1.png" height="173" width="374"><br>
    <br>
    All empty elements MUST be set to unused, and the element pointed to
    by tail must ALWAYS be empty.&nbsp; The slot pointed to by head is
    unused ONLY when the queue is empty.&nbsp; The algorithm MUST
    guarantee that an empty queue always has the head and tail pointing
    to the same element, and that element (actually all elements) set to
    unused.<br>
    <br>
    After a message m1 is enqueued, the queue looks like this:<br>
    <br>
    <img alt="tail now points at msgs[1]" src="q_pics2.png" height="174"
      width="305"><br>
    <br>
    Message m1 was written to the tail, and the tail was incremented.<br>
    <br>
    Now enqueue m2 and m3:<br>
    <br>
    <img alt="two more enqueues, queue is full" src="q_pics3.png"
      height="173" width="360"><br>
    <br>
    This queue algorithm defines full to be when there is exactly one
    empty element.&nbsp; Thus, in an N-element array, you can only store
    N-1 messages.&nbsp; Since tail must point to an empty element, the
    queue can be detected as being full when the element *after* the
    tail is used.&nbsp; In this case, the next element after tail is
    msgs[0], which still contains message m1.<br>
    <br>
    Now let's dequeue a message:<br>
    <br>
    <img alt="dequeue m1, head points at msgs[1]" src="q_pics4.png"
      height="174" width="305"><br>
    <br>
    When message m1 is dequeued, its array element MUST be set to
    unused.&nbsp; Then head is incremented.<br>
    <br>
    Note that this algorithm does not have a straight-forward method of
    calculating the queue length (i.e. the number of messages currently
    in the queue).&nbsp; You might be tempted to subtract the head from
    the tail, but it gets complicated when tail wraps and head has
    not.&nbsp; Even if you handle that properly, threading issues makes
    it dangerous to access both variables.&nbsp; It is much better to
    simply provide "is_full" and "is_empty" functions, which are
    typically what applications really want to know when they ask for
    the queue length.<br>
    <br>
    <h3><a class="mozTocH3" name="mozTocId391823"></a>Threading
      Considerations</h3>
    To make a high-performing lockless queue, it is important to
    minimize the memory which is shared between the threads.&nbsp; This
    queue is designed for single-producer, single-consumer.&nbsp; So you
    only have two threads to consider.<br>
    <br>
    The way the algorithm is designed, the enqueue thread accesses the
    tail pointer, NEVER the head.&nbsp; The dequeue thread accesses the
    head pointer, NEVER the tail.&nbsp; By making sure head and tail are
    on different cache lines, there is no memory contention for the head
    and tail pointers.&nbsp; The <tt>msgs</tt> array is the obvious
    point of sharing, so it is declared volatile.<br>
    <br>
    (Aside: there is debate whether volatile should ever be used.&nbsp;
    Many programmers prefer to use compiler barriers, as their semantics
    are more-exactly defined.&nbsp; Unfortunately, there isn't an
    efficient and portable way to code a compiler barrier.&nbsp; And
    while there are some ambiguities on the exact semantics of volatile,
    for the purposes of this q module, those ambiguities don't
    matter.&nbsp; My empirical measurements indicate that this algorithm
    performs about the same, regardless whether volatile or compiler
    barriers are used.&nbsp; One disadvantage of compiler barriers is
    that you must place them very carefully, which leaves opportunity
    for error.&nbsp; Also, a compiler barrier prevents reordering and
    optimization of ALL variables, both shared and private.&nbsp;
    Volatile limits its effect to only those variables that it is
    applied to, and extends those effects to every access to those
    variables.&nbsp; I use volatile for this algorithm.)<br>
    <br>
    (Another aside: the compiler barrier v.s. volatile debate is
    sometimes confused with hardware memory barriers.&nbsp; They are two
    different issues which must be treated differently.&nbsp; Compiler
    barriers and volatile variables control the order and optimization
    of the assembly language instructions which the compiler
    generates.&nbsp; Hardware memory barriers controls how the CPU and
    cache hardware is allowed to reorder physical memory accesses
    differently from the order of the assembly language instructions.)<br>
    <br>
    Another threading consideration is the number of shared variables
    which must be manipulated to operate on the queue.&nbsp; Each check
    of fullness and emptiness requires only a single read.&nbsp; The
    enqueue function looks at the element *after* the tail to determine
    if the queue is full.&nbsp; The dequeue function looks at the head
    element to determine if the queue is empty (head element unused).<br>
    <br>
    <h3><a class="mozTocH3" name="mozTocId63975"></a>Alternate
      Algorithms</h3>
    Under the directory "<tt>alternatives</tt>" are a series of
    alternative implementations: <tt>q1.c</tt> to <tt>q5.c</tt>.&nbsp;
    Three of the five produce longer timings for both streaming and
    ping-pong.&nbsp; Two of the, <tt>q2.c</tt> and <tt>q4.c</tt>,
    produce slightly better times for streaming, but worse times for
    ping-pong.&nbsp; I am sticking with q.c because I would expect
    queues to tend to be empty most of the time.<br>
    <br>
    <ul>
    </ul>
    <p> </p>
    <h2><a class="mozTocH2" name="mozTocId41959"></a>Module explanation:
      <tt>q.c</tt><br>
    </h2>
    The enqueue and dequeue functions are the heart of the lockless
    algorithm.&nbsp; In the code fragments below, <b>click on a line
      number to display the same code in-context on the right-side of
      the screen</b>.<br>
    <br>
    <h3><a class="mozTocH3" name="mozTocId56359"></a>Function q_enq</h3>
    To enqueue a message: =semlit,insert,enqueue= The tail pointer is
    defined as the number of enqueues mod the number of elements in the
    <tt>msgs</tt> array.&nbsp; By constraining the array size to a power
    of two, the tail can be quickly calculated as the number of enqueues
    bit-wise ANDed with the the number of array elements minus 1:
    =semlit,insert,tailcalc=<br>
    <h3><a class="mozTocH3" name="mozTocId423705"></a>Function: q_deq<br>
    </h3>
    To dequeue a message: =semlit,insert,dequeue= The head pointer is
    defined as the number of dequeues mod the number of elements in the
    <tt> msgs</tt> array.&nbsp; As with <tt>q_enq</tt>, a simple
    bit-wise AND can be used: =semlit,insert,headcalc=<br>
    <h3><a class="mozTocH3" name="mozTocId415348"></a>Structure: q_s</h3>
    Now let's take a look at the queue data structure:
    =semlit,insert,q_s= Note that this structure is private to <tt> q.c</tt>.&nbsp;









    The API sees an empty forward reference and type in <tt>q.h</tt>:
    =semlit,insert,q_t=<br>
    <br>
    To improve threading efficiency, the variables used by the enqueue
    and dequeue threads are separated and placed on independent <a
      href="https://en.wikipedia.org/wiki/Cache_line#Cache_entries">cache











      lines</a>.&nbsp; Cache lines are typically 64 bytes long, but I
    allocated 128 to be safe.&nbsp; (This is defined in the build script
    <tt>bld.sh</tt>.)&nbsp; This is used to include enough padding bytes
    to align to cache lines: =semlit,insert,pad= Note that it is
    important to keep the number and types of variables in a cache line
    synchronized with the padding calculation.&nbsp; This is a
    maintenance burden, but does reap performance benefits.<br>
    <br>
    <h3><a class="mozTocH3" name="mozTocId219381"></a>Function: q_create</h3>
    The <tt>q_create()</tt> function is pretty straight-forward, but
    there are a few little gems.<br>
    <br>
    To assist in debugging, a set of strings are defined corresponding
    to the return status error codes (those strings available via the <tt>q_qerr_str()</tt>
    function).&nbsp; The manifest constants are defined in <tt>q.h</tt>:
    =semlit,insert,qerr_defs= The strings are defined in <tt>q.c</tt>:
    =semlit,insert,qerr_strs= When a maintainer is modifying the q
    module, care must be taken when adding or changing the return status
    error codes to keep the two synchronized.&nbsp; To aid in detecting
    mistakes, <tt>q_create()</tt> does a sanity check:
    =semlit,insert,qerr_chk= The unit test code in <tt>q_selftest.c</tt>
    also does some sanity checking: =semlit,insert,qerr_utst=<br>
    <br>
    Another debugging aid is the fact that an <i>extra</i> element is
    allocated for the <tt>msgs</tt> array: =semlit,insert,alloc_msgs= A
    bit later, the ex extra element is set to <tt>Q_FENCE</tt>:
    =semlit,insert,fence_set= <tt>Q_FENCE</tt> is a manifest constant
    random number (generated at <a href="http://random.org/">random.org</a>):










    =semlit,insert,fence_def=&nbsp; This element and value are only used
    to sanity check the queue by detecting queue overrun (which the
    algorithm should never allow).&nbsp; This is done in <tt>q_delete()</tt>:
    =semlit,insert,fence_chk=<br>
    <h2><a class="mozTocH2" name="mozTocId97353"></a>Module explanation:
      q_selftest.c, q_selftest.h<br>
    </h2>
    The files <tt>q_selftest.h</tt> and <tt>q_selftest.c</tt> are
    conditionally included by <tt>q.c</tt>:
    =semlit,insert,inc_selftest_h= ... =semlit,insert,inc_selftest_c=
    They are for unit testing, and are compiled with <tt>q.c</tt> so
    that they can have access to internal definitions for white box
    testing.&nbsp; The build script <tt>bld.sh</tt> does a special unit
    test build with "<tt>-DSELFTEST</tt>" to enable the inclusion.<br>
    <br>
    It is important to understand that since the queue module
    implementation code is in the same compilation unit as the unit test
    code, the optimizer in-lines many of the functions, and performs
    significant compile-time optimizations as a result.&nbsp; Thus, the
    performance numbers printed by the unit test code are not
    representative of what an external module would see.<br>
    <br>
    One reason for doing the unit tests in the same compilation unit as
    the module is that certain subtle bugs can be found that way.&nbsp;
    For example, if you remove "<tt>volatile</tt>" from the declaration
    of <tt>q_t.msgs</tt>, the functions will appear to work most of the
    time.&nbsp; But the <tt>q_selftest.c</tt> function <tt>deq_thread()</tt>
    will end up in an infinite loop.&nbsp; This is because <tt>q_deq()</tt>
    checks the contents of <tt>msgs[0].in_use</tt> and finds it unused
    and returns <tt>QERR_EMPTY</tt>.&nbsp; Then <tt>deq_thread()</tt>
    ends up looping back and calling <tt>q_deq()</tt> again.&nbsp; But
    since the function is in-lined, the compiler notices that none of
    the relevant variables are modified in the empty code path, so it
    optimizes the function out completely.<br>
    <br>
    <h2><a class="mozTocH2" name="mozTocId449019"></a>Module
      explanation: q_perf.c</h2>
    The <tt>q_perf.c</tt> module consists of the same streaming and
    ping-pong performance tests as in <tt>q_selftest.c</tt>, minus the
    sanity checking.&nbsp; However, since the <tt>q_perf.c</tt> is
    built as a separate compilation unit, it calls the functions rather
    than allowing them to be in-lined.&nbsp; Thus, the performance
    measurements are more representative.<br>
    <br>
    The streaming test tends to measure performance where the queue is
    usually non-empty, and is frequently full, whereas the ping-pong
    test has the queues almost-always empty.&nbsp; Even though the
    streaming numbers are more-impressive looking, I suspect that in
    most use cases, the queue will spend more time empty than non-empty,
    leading me to choose the current queue implementation (which is the
    fastest ping-pong of the algorithms I've tested).<br>
    <br>
    <h2><a class="mozTocH2" name="mozTocId801555"></a>Developers</h2>
    The web-based software documentation you are looking at is called
    "SemiLiterate Documentation".&nbsp; The system which generates the
    doc is called "semlit", and is freely available at <a
      href="http://geeky-boy.com/semlit">http://geeky-boy.com/semlit</a>.<br>
    <br>
    If you are a user of the q module, you probably don't care about any
    of this and you can probably ignore it.&nbsp; However, if you are a
    maintainer, then you will want to be able to update and re-generate
    the doc.<br>
    <br>
    One very important fact: <b>DON'T DIRECTLY MODIFY THE *.c AND *.h
      FILES!</b>&nbsp; Those files are automatically generated from
    corresponding <tt>doc/*_c.slsrc</tt> and <tt>doc/*_h.slsrc</tt>
    files.&nbsp; To update the q module's code, you should modify the <tt>*.slsrc</tt>
    files, and then <i>generate</i> the <tt>.c</tt> and <tt>.h</tt>
    files by running <tt>bld.sh</tt>.<br>
    <br>
    So, first thing to do is download and install <a
      href="http://geeky-boy.com/semlit">semlit</a>.&nbsp; Make sure
    that semlit.sh is in your <tt>PATH</tt> (otherwise the q module's "<tt>bld.sh</tt>"
    will skip the semlit stuff).&nbsp; Then use an html editor (like <a
      href="http://www.seamonkey-project.org/releases/seamonkey2.13/">SeaMonkey</a>)
    to modify <tt>doc/*.sldoc</tt> files, and a code editor (like <a
      href="http://www.vim.org">vim</a>) to modify <tt>doc/*.slsrc</tt>
    files.&nbsp; Finally, run <tt>bld.sh</tt> to generate the files.<br>
    <br>
    The scripts used by developers are:<br>
    <ul>
      <li><tt>bld.sh</tt> - build the package.</li>
      <li><tt>bld_semlit.sh</tt> - build the semi-literate documentation
        package (optional).</li>
      <li><tt>clean.sh</tt> - remove temporary files.</li>
      <li><tt>tst.sh</tt> - run the unit tests.</li>
      <li><tt>tar.sh</tt> - create tarball.&nbsp; Uses "<tt>00VERSION.TXT</tt>"
        to set the version number.</li>
      <li><tt>publish.sh</tt> - transfer to geeky-boy.com account.&nbsp;
        Uses "<tt>00VERSION.TXT</tt>" to set the version number.<br>
      </li>
    </ul>
    <p>When the package version number needs to be bumped:<br>
    </p>
    <ul>
      <li>Update the "00VERSION.txt" file.&nbsp; This file is used by
        the scripts to properly name everything.</li>
      <li>Update this document - both the initial header line and the
        name of the tar file in the introduction and quick start
        sections.&nbsp; (Some of the references are links, meaning you
        have to change both the displayed link and the href.&nbsp; I
        find it easier to just edit the index.html with a normal text
        editor and search for "[0-9]\.[0-9]".</li>
    </ul>
    <br>
  </body>
</html>
